package app.bankview;

import java.util.*;
import java.util.stream.Collectors;

import javax.print.DocFlavor.STRING;
import javax.servlet.http.HttpServletRequest;

import app.service.CourseTemplateService;
import org.codehaus.groovy.runtime.StringGroovyMethods;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;

import app.entity.coursetime.CourseTable;
import app.entity.smart.CourseBaseInfo;
import app.entity.user.School;
import app.repository.CourseBaseInfoRepository;
import app.repository.SchoolRepository;

@Controller
@RequestMapping("/web/course")
public class CourseView<E> {
    @Autowired
    private SchoolRepository schoolRepository;
    @Autowired
    private CourseBaseInfoRepository courseBaseInfoRepository;
    @Autowired
    private CourseTemplateService courseTemplateService;

    @RequestMapping("/required")
    public String index(HttpServletRequest request) {
        List<School> list = schoolRepository.findAll();
        List<String> ids = new ArrayList<>();
        List<School> schoolList = list.stream().filter(v -> {
            boolean flag = !ids.contains(v.getSchoolName());
            ids.add(v.getSchoolName());
            return flag;
        }).collect(Collectors.toList());
        request.setAttribute("list", schoolList);
        return "required";
    }

    @RequestMapping("/elective")
    public String elective(HttpServletRequest request) {
        List<School> list = schoolRepository.findAll();
        List<String> ids = new ArrayList<>();
        List<School> schoolList = list.stream().filter(v -> {
            boolean flag = !ids.contains(v.getSchoolName());
            ids.add(v.getSchoolName());
            return flag;
        }).collect(Collectors.toList());
        request.setAttribute("list", schoolList);
        return "elective";
    }

    @RequestMapping("/get/college")
    @ResponseBody
    public String getCollege(HttpServletRequest request) {
        String schoolName = request.getParameter("schoolName");
        List<School> list = schoolRepository.findBySchoolName(schoolName);
        List<String> ids = new ArrayList<>();
        List<School> schoolList = list.stream().filter(v -> {
            boolean flag = !ids.contains(v.getSchoolCollege());
            ids.add(v.getSchoolCollege());
            return flag;
        }).collect(Collectors.toList());

        return JSON.toJSONString(schoolList);
    }

    @RequestMapping("/get/major")
    @ResponseBody
    public String getMajor(HttpServletRequest request) {
        String schoolName = request.getParameter("schoolName");
        String schoolCollege = request.getParameter("schoolCollege");
        List<School> list = schoolRepository.findBySchoolCollegeAndSchoolName(schoolCollege, schoolName);
        List<String> ids = new ArrayList<>();
        List<School> schoolList = list.stream().filter(v -> {
            boolean flag = !ids.contains(v.getSchoolMajor());
            ids.add(v.getSchoolMajor());
            return flag;
        }).collect(Collectors.toList());
        return JSON.toJSONString(schoolList);
    }

    @RequestMapping("/get/grade")
    @ResponseBody
    public String getGrade(HttpServletRequest request) {
        String schoolName = request.getParameter("schoolName");
        String schoolCollege = request.getParameter("schoolCollege");
        String schoolMajor = request.getParameter("schoolMajor");
        List<School> list = schoolRepository.findBySchoolMajorAndSchoolCollegeAndSchoolName(schoolMajor, schoolCollege,
                schoolName);
        return JSON.toJSONString(list);
    }

    @RequestMapping("/get/coursetable")
    @ResponseBody
    public String getCourseTable(HttpServletRequest request) {
        String schoolId = request.getParameter("schoolId");
        String type = request.getParameter("type");
        List<CourseBaseInfo> list = new ArrayList<>();
        if (ConstantsKey.selcct_course.equals(type)) {
            list = courseBaseInfoRepository.findBySchoolIdAndCourseTypeAndState(schoolId, ConstantsKey.selcct_course,"t");
            return JSON.toJSONString(list);
        } else {
            list = courseBaseInfoRepository.findBySchoolIdAndCourseTypeAndState(schoolId, ConstantsKey.require_course,"t");
        }
        Map<String, CourseTable> map = new HashMap<>();
        CourseTable ct;
        // 构建课程小节数
        for (int i = 1; i <= ConstantsKey.COURSE_NUMBER.size(); i++) {
            ct = new CourseTable(i + "");
            ct.setNumberName(ConstantsKey.COURSE_NUMBER.get(i + ""));
            map.put(i + "", ct);
        }
        if (list != null && list.size() > 0) {
            for (CourseBaseInfo c : list) {
                String number = c.getSectionNumber();
                ct = map.get(number);
                Map<String, Object> info = new HashMap<>();
                info.put("courseName", c.getCourseName());
                info.put("weeks", c.getWeeks());
                info.put("teacher", c.getCourseTeachr());
                info.put("id", c.getId());
                // 设置周一到周日的课程
                if (c.getWeek().equals("1")) {
                    ct.setMonday(info);
                } else if (c.getWeek().equals("2")) {
                    ct.setTuesday(info);
                } else if (c.getWeek().equals("3")) {
                    ct.setWednesday(info);
                } else if (c.getWeek().equals("4")) {
                    ct.setThursday(info);
                } else if (c.getWeek().equals("5")) {
                    ct.setFriday(info);
                } else if (c.getWeek().equals("6")) {
                    ct.setSaturday(info);
                } else if (c.getWeek().equals("7")) {
                    ct.setSunday(info);
                }
                map.put(number, ct);
            }
        }
        System.out.println(JSON.toJSONString(map));
        return JSON.toJSONString(map);
    }

    @RequestMapping("/add/course")
    @ResponseBody
    public String addCourse(HttpServletRequest request) {
        String courseName = request.getParameter("course_name");
        String classPlace = request.getParameter("class_placce");
        String weeks = request.getParameter("weeks");
        String schoolId = request.getParameter("schoolId");
        String number = request.getParameter("number_form");
        String teacher = request.getParameter("teacher");
        String powers = request.getParameter("powers");
        String week = request.getParameter("weeks_form");
        String id = request.getParameter("id");
        String type = request.getParameter("type");
        String tag=request.getParameter("tag");
        String tags=JSON.toJSONString(tag.split(","));
        CourseBaseInfo c = new CourseBaseInfo();
        c.setCourseTags(tags);
        c.setCourseName(courseName);
        c.setClassPlace(classPlace);
        if (!StringUtils.isEmpty(type)) {
            c.setCourseType("选修");
        } else {
            c.setCourseType("必修");
        }
        c.setWeeks(weeks);
        c.setSectionNumber(number);
        c.setCourseTeachr(teacher);
        c.setPowerPoint(Integer.parseInt(powers));
        c.setWeek(week);
        c.setSchoolId(schoolId);
        c.setState("t");
        if (!StringUtils.isEmpty(id)) {
            List<CourseBaseInfo> list = courseBaseInfoRepository.findById(Long.parseLong(id));
            CourseBaseInfo cb = list.get(0);
            cb.setCourseName(courseName);
            cb.setClassPlace(classPlace);
            cb.setWeeks(weeks);
            cb.setCourseTeachr(teacher);
            cb.setPowerPoint(Integer.parseInt(powers));
            cb.setCourseTeachr(teacher);
            cb.setCourseTags(tags);
            if (!StringUtils.isEmpty(type)) {
                cb.setSectionNumber(number);
            }
            courseBaseInfoRepository.saveAndFlush(cb);
            courseTemplateService.courseUpdate(schoolId);
            return JSON.toJSONString(cb);
        } else {
            c = courseBaseInfoRepository.save(c);
            courseTemplateService.courseUpdate(schoolId);
            return JSON.toJSONString(c);
        }

    }

    @RequestMapping("/get/course")
    @ResponseBody
    public String getCourse(HttpServletRequest request) {
        String id = request.getParameter("id");
        List<CourseBaseInfo> list = courseBaseInfoRepository.findById(Long.parseLong(id));
        return JSON.toJSONString(list);
    }

    @RequestMapping("/delete")
    @ResponseBody
    public String deleteCourse(HttpServletRequest request) {
        String id = request.getParameter("id");
        String schoolId = request.getParameter("schoolId");
        String ids[] = id.split(",");
        for (int i = 0; i < ids.length; i++) {
           // courseBaseInfoRepository.delete(Long.parseLong(ids[i]));
            CourseBaseInfo baseInfo=courseBaseInfoRepository.findOne(Long.parseLong(ids[i]));
            baseInfo.setState("f");
            courseBaseInfoRepository.saveAndFlush(baseInfo);
        }
        Map<String, Object> map = new HashMap<>();
        map.put("state", true);
        courseTemplateService.courseUpdate(schoolId);
        return JSON.toJSONString(map);
    }
}

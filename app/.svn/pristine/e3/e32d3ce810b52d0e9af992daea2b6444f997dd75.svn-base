package app.service.impl;

import app.entity.user.User;
import app.packet.request.CommonPacket;
import app.repository.UserRepository;
import app.service.UserService;
import app.util.AESUtil;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.codec.digest.Md5Crypt;
import org.apache.tomcat.util.codec.binary.Base64;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.ResponseErrorHandler;
import org.springframework.web.client.RestTemplate;


import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Service
public class UserServiceImpl implements UserService {
    private final Logger logger = LoggerFactory.getLogger(this.getClass()) ;

    private final static String sendUrl = "https://api.sms.jpush.cn/v1/codes";
    private final static String validUrl = "https://api.sms.jpush.cn/v1/codes/%s/valid";

    @Value("${sms.appKey}")
    private String appKey;
    @Value("${sms.masterCode}")
    private String masterCode;

    @Autowired
    private UserRepository userRepository;
    @Value("${api.session.timeout}")
    private int apiSessionTimeout;
    @Value("${api.session.encryptSeed}")
    private String apiSessionEncryptSeed;
    @Override
    public User getUser(String username) {
        return userRepository.findOne(username);
    }

    @Override
    public User getUserByTelephone(String mobile) {
        return userRepository.findByUserTelephone(mobile);
    }

    @Override
    public boolean validatePassword(String username, String password) {
        User user = getUserByTelephone(username);
        if (user != null ){
            return user.getUserPassword().equals(password);
        }else {
            return false;
        }
    }

    @Override
    public String getToken(String username, String deviceId) {
        String mixed = String .format("%s|%s|%d", username, deviceId, System.currentTimeMillis() + apiSessionTimeout * 60 * 1000);
        return AESUtil.encrypt(mixed, apiSessionEncryptSeed);
    }

    @Override
    public String validateAndRefreshToken(String username, String deviceId, String token) {
        String decrypted = AESUtil.decrypt(token, apiSessionEncryptSeed);
        String[] fields = decrypted.split("|");
        if (fields.length == 3){
            String encryptUsername = fields[0];
            String encryptDeviceId = fields[1];
            Long timeMillis = Long.parseLong(fields[2]);
            if (encryptUsername.equals(username) && encryptDeviceId.equals(deviceId)){
                Long currentMillis = System.currentTimeMillis();
                if (timeMillis <= currentMillis){
                    return null;
                }else {
                    if (timeMillis - System.currentTimeMillis() < (apiSessionTimeout - 2) * 60 * 1000){
                        return getToken(username, deviceId);
                    }else {
                        return token;
                    }
                }
            }else {
                return null;
            }
        }else {
            return null;
        }
    }

    @Override
    public String validateAndRefreshToken(CommonPacket packet) {
        return validateAndRefreshToken(packet.getUsername(), packet.getDeviceId(), packet.getToken());
    }

    @Override
    public boolean valid(String user, String messageId, String code) throws UnsupportedEncodingException {
        RestTemplate restTemplate = new RestTemplate();
        ResponseErrorHandler responseErrorHandler = new ResponseErrorHandler() {
            @Override
            public boolean hasError(ClientHttpResponse clientHttpResponse) throws IOException {
                return false;
            }
            @Override
            public void handleError(ClientHttpResponse clientHttpResponse) throws IOException {

            }
        };
        restTemplate.setErrorHandler(responseErrorHandler);
        Map<String,Object > req = new HashMap<>();
        req.put("code", code);
        Gson gson = new Gson();
        MultiValueMap<String ,String > headers = new LinkedMultiValueMap<>();
        headers.add("Content-Type", "application/json");
        headers.add("Authorization", "Basic " + Base64.encodeBase64String((appKey + ":" + masterCode).getBytes("UTF-8")));
        HttpEntity<String> entity = new HttpEntity<>(gson.toJson(req), headers);
        if (messageId != null){
            String res = restTemplate.postForObject(String.format(validUrl, messageId), entity, String .class);
            Map<String ,Object> map = gson.fromJson(res, new TypeToken<Map<String,Object>>(){}.getType());
            boolean isValid = (boolean)map.getOrDefault("is_valid", false);
            if (isValid){
                return true;
            }
            logger.info(res);
        }
        return false;
    }

    @Override
    public String sendSmsCode(String mobile) throws UnsupportedEncodingException {
        RestTemplate restTemplate = new RestTemplate();
        Map<String,Object > req = new HashMap<>();
        req.put("temp_id", 1);
        req.put("mobile", mobile);
        Gson gson = new Gson();
        MultiValueMap<String ,String > headers = new LinkedMultiValueMap<>();
        headers.add("Content-Type", "application/json");
        headers.add("Authorization", "Basic " + Base64.encodeBase64String((appKey + ":" + masterCode).getBytes("UTF-8")));
        HttpEntity<String> entity = new HttpEntity<>(gson.toJson(req), headers);
        try {
            String res = restTemplate.postForObject(sendUrl, entity, String .class);
            Map<String ,String> map = gson.fromJson(res, new TypeToken<Map<String,String>>(){}.getType());
            String msgId = map.getOrDefault("msg_id", "");
            if (!msgId.isEmpty()){
                return msgId;
            }
            return null;
        }catch (Exception e){
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public void save(String mobile, String password) {
        User user = new User();
        user.setUserTelephone(mobile);
        user.setUserPassword(Md5Crypt.md5Crypt(password.getBytes()));
        userRepository.save(user);
    }
}

package app.apiservice;

import app.entity.PageInfo;
import app.entity.content.BaseContent;
import app.entity.json.wt.WisdomTreeView;
import app.entity.personcenter.MyCollectContent;
import app.entity.user.PassKnowledge;
import app.entity.user.User;
import app.repository.PassKnowledgeRepository;
import org.springframework.data.domain.Page;
import app.packet.Pagination;
import app.packet.error.ErrorEnum;
import app.packet.request.CommonPagePacket;
import app.packet.response.CommonMessage;
import app.repository.ContentRepository;
import com.alibaba.fastjson.JSON;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by gongmingbo on 2018/11/12.
 * 课程推荐
 */
@RestController
@ControllerAdvice
@RequestMapping(path = "/api/recommend")
public class Recommend {
    private final Logger logger = LoggerFactory.getLogger(this.getClass()) ;

    @Autowired
    private ContentRepository contentRepository;
    @Autowired
    private PassKnowledgeRepository passKnowledgeRepository;


    @RequestMapping(path = "/courseProfession",method = RequestMethod.POST)
    public CommonMessage recommend(@RequestBody CommonPagePacket packet){
        logger.info("userId is: " + packet.getUsername());
        logger.info("deviceId is: " + packet.getDeviceId());
        logger.info("token is: " + packet.getToken());
        logger.info("page is: " + packet.getPage());
        logger.info("size is: " + packet.getSize());
        Pageable pageable = new PageRequest(packet.getPage() - 1, packet.getSize());
        Page<BaseContent>  listPage= contentRepository.findAll(pageable);

        List<PassKnowledge> pros = passKnowledgeRepository.findByUserId(packet.getUsername());
        //WisdomTreeView w=pros.get(0).getPlan();
        CommonMessage message;
        if(listPage==null||listPage.getContent()==null){
            message = CommonMessage.failure(ErrorEnum.CONTENT_COLLECT_INVALID);
        }else{
            PageInfo<List<BaseContent>> basePage=new PageInfo<>();
            /*Sort sort = new Sort(Sort.Direction.DESC, "publishTime");*/
            //Pageable pageable = new PageRequest(pageNum - 1, 10, sort);
            //分页数据集合
            List<BaseContent> listBaseContent = listPage.getContent();

            basePage.setData(listBaseContent);//每一页数据
            basePage.setPage(packet.getPage());//当前页
            basePage.setSize(packet.getSize());//每页显示条数
            basePage.setTotalPage(listPage.getTotalPages());//总页数
            message=CommonMessage.success(basePage,null);
        }
        return message;
    }
}
